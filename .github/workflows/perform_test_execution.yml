name: FF-A ACS Test execution

on:
  workflow_call:
    inputs:
      level:
        required: true
        type: string

jobs:
  test_execution:
    name: FF-A ACS Test execution
    runs-on: ubuntu-22.04
    steps:
      - name: 'Checkout FF-A ACS'
        uses: actions/checkout@v4

      - name: 'Download Pre-requisites'
        run: |
          sudo apt-get update && sudo apt-get install -y make libssl-dev flex bison python3 python3-serial python3-pip device-tree-compiler wget libtinfo5
          pip3 install fdt

      - name: 'Download Build output'
        uses: actions/download-artifact@v4
        with:
          name: build_output_${{ inputs.level }}
          path: ./build/output

      - name: 'Load environment variables from .env file'
        run: |
          set +a
          source ./.github/.env
          set -a

      - name: 'Set environment variables for ${{ inputs.level }}'
        run: |
          case "${{ inputs.level }}" in
            EL0)
              echo "SP_LAYOUT=${GITHUB_WORKSPACE}/platform/manifest/tgt_tfa_fvp/sp_layout_el0_v12.json" >> ${GITHUB_ENV}
              echo "SPMC_MANIFEST_DTS=${GITHUB_WORKSPACE}/platform/manifest/tgt_tfa_fvp/fvp_spmc_manifest_el0.dts" >> ${GITHUB_ENV}
              ;;
            EL1)
              echo "SP_LAYOUT=${GITHUB_WORKSPACE}/platform/manifest/tgt_tfa_fvp/sp_layout_v12.json" >> ${GITHUB_ENV}
              echo "SPMC_MANIFEST_DTS=${GITHUB_WORKSPACE}/platform/manifest/tgt_tfa_fvp/fvp_spmc_manifest.dts" >> ${GITHUB_ENV}
              ;;
            *)
              ;;
          esac

      - name: 'Download and compile Hafnium'
        run: |
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-18.1.8/clang+llvm-18.1.8-x86_64-linux-gnu-ubuntu-18.04.tar.xz
          tar -xf clang+llvm-18.1.8-x86_64-linux-gnu-ubuntu-18.04.tar.xz
          export PATH=${GITHUB_WORKSPACE}/clang+llvm-18.1.8-x86_64-linux-gnu-ubuntu-18.04/bin:${PATH}
          git clone https://git.trustedfirmware.org/hafnium/hafnium.git
          cd hafnium
          git checkout ${HAFNIUM_VERSION}
          export PATH=${PWD}/prebuilts/linux-x64/dtc:${PATH}
          git submodule update --init
          cp ${GITHUB_WORKSPACE}/.github/gn prebuilts/linux-x64/gn/gn
          clang -v
          make PROJECT=reference PLATFORM=secure_aem_v8a_fvp_vhe -j32

      - name: 'Download and compile TF-A'
        run: |
          wget https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf.tar.xz
          tar -xf gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf.tar.xz
          export CROSS_COMPILE=${GITHUB_WORKSPACE}/gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf/bin/aarch64-none-elf-
          git clone https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git
          cd trusted-firmware-a
          git checkout ${TF_A_VERSION}
          make realclean
          make SPD=spmd \
          CROSS_COMPILE=${CROSS_COMPILE} \
          PLAT=fvp \
          DEBUG=1 \
          BL33=${GITHUB_WORKSPACE}/build/output/vm1.bin \
          BL32=${GITHUB_WORKSPACE}/hafnium/out/reference/secure_aem_v8a_fvp_vhe_clang/hafnium.bin \
          SP_LAYOUT_FILE=${SP_LAYOUT} \
          ARM_SPMC_MANIFEST_DTS=${SPMC_MANIFEST_DTS} \
          ARM_ARCH_MAJOR=8 \
          ARM_ARCH_MINOR=5 \
          BRANCH_PROTECTION=1 \
          GIC_EXT_INTID=1 \
          PLAT_TEST_SPM=1 \
          ENABLE_FEAT_MTE2=1 \
          ARM_BL2_SP_LIST_DTS=${PWD}/build/fvp/debug/sp_list_fragment.dts \
          POETRY= \
          all fip -j8

      - name: 'Run tests on BaseFVP RevC Model'
        run: |
           wget https://developer.arm.com/-/media/Files/downloads/ecosystem-models/FM_11_25/FVP_Base_RevC-2xAEMvA_11.25_15_Linux64.tgz
           tar -xf FVP_Base_RevC-2xAEMvA_11.25_15_Linux64.tgz
           cd trusted-firmware-a
           ${GITHUB_WORKSPACE}/Base_RevC_AEMvA_pkg/models/Linux64_GCC-9.3/FVP_Base_RevC-2xAEMvA \
           -C pctl.startup=0.0.0.0 \
           -C cluster0.NUM_CORES=4 \
           -C cluster1.NUM_CORES=4 \
           -C bp.secure_memory=1 \
           -C bp.secureflashloader.fname=build/fvp/debug/bl1.bin \
           -C bp.flashloader0.fname=build/fvp/debug/fip.bin \
           -C bp.vis.disable_visualisation=1 \
           -C bp.terminal_0.start_telnet=0 \
           -C bp.terminal_1.start_telnet=0 \
           -C bp.terminal_2.start_telnet=0 \
           -C bp.pl011_uart0.out_file=${GITHUB_WORKSPACE}/FF-A_regression_${{ inputs.level }}_uart0.log \
           -C bp.pl011_uart1.out_file=${GITHUB_WORKSPACE}/FF-A_regression_${{ inputs.level }}_uart1.log \
           -C bp.pl011_uart2.out_file=${GITHUB_WORKSPACE}/FF-A_regression_${{ inputs.level }}.log \
           -C cluster0.has_arm_v8-5=1 \
           -C cluster1.has_arm_v8-5=1 \
           -C cluster0.has_pointer_authentication=2 \
           -C cluster1.has_pointer_authentication=2 \
           -C cluster0.has_branch_target_exception=1 \
           -C cluster1.has_branch_target_exception=1 \
           -C cluster0.memory_tagging_support_level=2 \
           -C cluster1.memory_tagging_support_level=2 \
           -C bp.dram_metadata.is_enabled=1 \
           -C pci.pci_smmuv3.mmu.SMMU_AIDR=2 \
           -C pci.pci_smmuv3.mmu.SMMU_IDR0=0x0046123B \
           -C pci.pci_smmuv3.mmu.SMMU_IDR1=0x00600002 \
           -C pci.pci_smmuv3.mmu.SMMU_IDR3=0x1714 \
           -C pci.pci_smmuv3.mmu.SMMU_IDR5=0xFFFF0472 \
           -C pci.pci_smmuv3.mmu.SMMU_S_IDR1=0xA0000002 \
           -C pci.pci_smmuv3.mmu.SMMU_S_IDR2=0 \
           -C pci.pci_smmuv3.mmu.SMMU_S_IDR3=0 \
           -C cluster0.gicv3.extended-interrupt-range-support=1 \
           -C cluster1.gicv3.extended-interrupt-range-support=1 \
           -C gic_distributor.extended-ppi-count=64 \
           -C gic_distributor.extended-spi-count=1024 \
           -C gic_distributor.ARE-fixed-to-one=1 \
           -C bp.pl011_uart2.shutdown_tag="END OF ACS"

      - name: 'Store Test execution logs as artifact'
        uses: actions/upload-artifact@v4
        with:
          name: FF-A_regression_report_${{ inputs.level }}
          path: |
            FF-A_regression_${{ inputs.level }}.log
            FF-A_regression_${{ inputs.level }}_uart0.log
            FF-A_regression_${{ inputs.level }}_uart1.log
          if-no-files-found: error
